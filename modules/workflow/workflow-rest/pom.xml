<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>workflow</artifactId>
        <groupId>grape</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>workflow-rest</artifactId>


    <dependencies>
        <dependency>
            <groupId>grape</groupId>
            <artifactId>common-rest</artifactId>
            <version>${grape.version}</version>
        </dependency>

        <!-- 该包中包含了所有可用的api，包括前端http的rest api和后台的service api接口，所以workflow的service模块只需要引入 flowable-spring-boot-starter 并scope为provided即可-->

        <dependency>
            <groupId>org.flowable</groupId>
            <artifactId>flowable-spring-boot-starter-rest</artifactId>
            <version>${flowable.version}</version>
            <exclusions>
                <!-- 该包也有冲突 -->
                <exclusion>
                    <groupId>org.mybatis</groupId>
                    <artifactId>mybatis</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- ui modeler 开始 -->
        <!-- ui modeler 提供的大量的rest api 供页面调用，所以不再重复造轮子，直接引入即可，这里主要是集成流程设计编辑器，当前还有更多其它设计相关的ui也包含在这里面 -->
        <dependency>
            <groupId>org.flowable</groupId>
            <artifactId>flowable-ui-modeler-rest</artifactId>
            <version>${flowable.version}</version>

        </dependency>
        <dependency>
            <groupId>org.flowable</groupId>
            <artifactId>flowable-ui-modeler-conf</artifactId>
            <version>${flowable.version}</version>
            <exclusions>
                <!-- 本项目依赖common service 使用mybatis plus增强，由于mybatis-spring 版本差异 有问题，直接错误就是 java.lang.NoClassDefFoundError: org/mybatis/logging/LoggerFactory -->
                <!-- 经运行 dependecy:tree 查看有版本冲突，排除掉 1.3.2 -->
                <exclusion>
                    <groupId>org.mybatis</groupId>
                    <artifactId>mybatis-spring</artifactId>
                </exclusion>
                <!-- 该包也有冲突 -->
                <exclusion>
                    <groupId>org.mybatis</groupId>
                    <artifactId>mybatis</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.flowable</groupId>
            <artifactId>flowable-ui-modeler-logic</artifactId>
            <version>${flowable.version}</version>
            <exclusions>
                <!-- 本项目不使用 spring-security进行安全鉴权，因为 SecurityAutoConfiguration 自动配置是基于DefaultAuthenticationEventPublisher类的存在而该类是存在于spring-security-core，所以排除掉，不再自动配置-->
                <!-- 具体详见 org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration 的注释@ConditionalOnClass(DefaultAuthenticationEventPublisher.class)-->
               <!-- <exclusion>
                    <groupId>org.springframework.security</groupId>
                    <artifactId>spring-security-core</artifactId>
                </exclusion>-->

                <!-- 本项目使用 logback 排除掉日志冲突 -->
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-log4j2</artifactId>
                </exclusion>
                <!-- 本项目依赖common service 使用mybatis plus增强，由于mybatis-spring 版本差异 有问题，直接错误就是 java.lang.NoClassDefFoundError: org/mybatis/logging/LoggerFactory -->
                <!-- 经运行 dependecy:tree 查看有版本冲突，排除掉 1.3.2 -->
                <exclusion>
                    <groupId>org.mybatis</groupId>
                    <artifactId>mybatis-spring</artifactId>
                </exclusion>
                <!-- 该包也有冲突 -->
                <exclusion>
                    <groupId>org.mybatis</groupId>
                    <artifactId>mybatis</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- ui modeler 结束 -->
    </dependencies>
</project>